{"version":3,"file":"index.CjtGBC5g.js","sources":["../../../node_modules/.pnpm/recharts@2.13.0-alpha.4_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/recharts/es6/chart/BarChart.js","../../../lib/components/logic/CustomizedLabel/CustomizedLabel.tsx","../../../lib/components/BarChart/constants.ts","../../../lib/components/BarChart/logic/constants.ts","../../../lib/components/BarChart/BarChart.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample1.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample10.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample11.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample12.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample13.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample2.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample3.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample4.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample5.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample6.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample7.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample8.tsx","../../../src/pages/BarChartExamplePage/examples/BarChartExample9.tsx","../../../src/pages/BarChartExamplePage/BarChartExamplePage.tsx"],"sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import clsx from 'clsx';\nimport { formatLabel } from '../utils/formatters';\nimport styles from './CustomizedLabel.module.scss';\nimport type { LabelProps } from 'recharts';\n\n// NOTE!!! The color of each bar is stored in 'fill'.\nexport default function CustomizedLabel(props: LabelProps) {\n  const { x, y, width, height, value, fontSize, fontWeight, position } = props;\n\n  // if it's a stackedBar, put number in middle of Bar, else - put above.\n  const updatedYPosition = position === 'center' ? +y! + +height! / 2 : +y! - 10;\n\n  // This calculation below assumes that textAnchor will always be set to 'end'.\n  const xPosition = +x! + +width! / 2;\n\n  return (\n    <text\n      x={xPosition}\n      y={updatedYPosition}\n      textAnchor='middle'\n      dominantBaseline='middle'\n      className={clsx('chart-customized-label', styles.textLabel)}\n      style={{ fontSize, fontWeight }}\n    >\n      {formatLabel(value)}\n    </text>\n  );\n}\n","const DEFAULT_BAR_COLOR = '#355cff';\nconst ACTIVE_BAR_COLOR = 'black'; // #82ca9d\nconst BAR_LAYOUT_TO_CHART_LAYOUT: Record<string, 'vertical' | 'horizontal'> = {\n  horizontal: 'vertical',\n  vertical: 'horizontal',\n};\n\nexport { ACTIVE_BAR_COLOR, BAR_LAYOUT_TO_CHART_LAYOUT, DEFAULT_BAR_COLOR };\n","const CLASSES = {\n  barChart: 'tk-custom-bar-chart',\n};\n\nexport { CLASSES };\n","import { useMemo, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport {\n  Bar,\n  BarChart as BarChartBase,\n  Brush,\n  CartesianGrid,\n  Cell,\n  LabelList,\n  Legend,\n  ReferenceLine,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\nimport { BRUSH_ITEMS_PER_PAGE, CLASSES as GLOBAL_CLASSES } from '../logic/constants';\nimport CustomizedAxisTick from '../logic/CustomAxisTick';\nimport CustomizedLabel from '../logic/CustomizedLabel';\nimport CustomTooltip from '../logic/CustomTooltip';\nimport {\n  FORMATTERS,\n  calculateYAxisWidth,\n  getBarChartMergedChartSettings,\n  getLengthOfLongestData,\n  getNamesObject,\n  getTextWidth,\n  getWidthOfLongestXLabel,\n  getXAxisHeight,\n  runValidationsOnAllSeries,\n} from '../logic/utils';\nimport styles from './BarChart.module.scss';\nimport { ACTIVE_BAR_COLOR, BAR_LAYOUT_TO_CHART_LAYOUT, DEFAULT_BAR_COLOR } from './constants';\nimport { CLASSES } from './logic/constants';\nimport type { BarChartSettings, BarClickEventProps, BarSeries, BaseChartProps } from '../types';\nimport '../../recharts.css';\n\ntype BarChartProps = BaseChartProps & {\n  settings?: BarChartSettings;\n  bars: Array<BarSeries>;\n  onClickBar?: (props: BarClickEventProps & { name: string; barTypeIndex: number }) => void;\n  /**\n   * Every Bar within the BarChart has an ID which is a string comprised of '[bar name]-[x value]'.\n   * @example\n   * const bars = [{ name: 'hello', data: [{x: 'Israel', y: 140}, x: 'France', y: 120]}];\n   * // The barIds are: 'hello-Israel' & 'hello-France'\n   */\n  activeBarId?: string;\n  /**\n   * @default 'vertical'\n   */\n  layout?: 'horizontal' | 'vertical';\n};\n\nexport default function BarChart(props: BarChartProps) {\n  const {\n    type: xAxisType = 'category',\n    layout: barsLayout = 'vertical',\n    settings: settingsToMerge,\n    bars,\n    referenceLines,\n    className,\n    style,\n    onClickBar,\n    activeBarId,\n  } = props;\n\n  useMemo(() => runValidationsOnAllSeries(bars), [bars]);\n\n  const lengthOfLongestData = useMemo(() => getLengthOfLongestData(bars), [bars]);\n\n  const startIndex = useRef(0);\n  const endIndex = useRef(Math.min(BRUSH_ITEMS_PER_PAGE, lengthOfLongestData - 1));\n  const [isLegendHovered, setIsLegendHovered] = useState(false);\n  const [isBarTypeHovered, setIsBarTypeHovered] = useState(() => getNamesObject(bars));\n  const [visibleBars, setVisibleBars] = useState(() => getNamesObject(bars, true));\n\n  const positiveXTickRotateAngle = Math.abs(settingsToMerge?.xAxis?.tickAngle ?? 0);\n\n  const transformedDataForRecharts: Array<{ x: number | string }> = useMemo(() => {\n    const transformedDataByKey: Record<string, any> = {};\n\n    bars.forEach((barType) => {\n      barType.data.forEach(({ x, y }) => {\n        transformedDataByKey[x] ??= { x };\n        transformedDataByKey[x][barType.name] = y;\n      });\n    });\n\n    return Object.values(transformedDataByKey);\n  }, [bars]);\n\n  const maxYValue = useMemo(() => {\n    let maxYValue = Number.NEGATIVE_INFINITY;\n    bars.forEach((currentBarType) => {\n      currentBarType.data.forEach(({ y }) => {\n        if (maxYValue < y) maxYValue = y;\n      });\n    });\n\n    return maxYValue;\n  }, [bars]);\n\n  const widthOfLongestXTickLabel = useMemo(\n    () =>\n      getWidthOfLongestXLabel({\n        transformedDataForRecharts,\n        xTickFormatter: settingsToMerge?.xAxis?.tickFormatter ?? FORMATTERS[xAxisType],\n        xFontSize: settingsToMerge?.xAxis?.tickFontSize,\n      }),\n    [\n      transformedDataForRecharts,\n      xAxisType,\n      settingsToMerge?.xAxis?.tickFormatter,\n      settingsToMerge?.xAxis?.tickFontSize,\n    ],\n  );\n\n  const xAxisHeight = useMemo(\n    () =>\n      getXAxisHeight({\n        tickAngle: -positiveXTickRotateAngle,\n        maxTextWidth: widthOfLongestXTickLabel,\n        isLegendVisible: !!(settingsToMerge?.legend?.show ?? true),\n        isSliderVisible: !!settingsToMerge?.zoomSlider?.show,\n        isXLabelVisible: !!settingsToMerge?.xAxis?.label,\n      }),\n    [\n      positiveXTickRotateAngle,\n      widthOfLongestXTickLabel,\n      settingsToMerge?.legend?.show,\n      settingsToMerge?.zoomSlider?.show,\n      settingsToMerge?.xAxis?.label,\n    ],\n  );\n\n  const yAxisWidth = useMemo(() => {\n    const yAxisWidth = calculateYAxisWidth({\n      maxYValue,\n      yLabel: settingsToMerge?.yAxis?.label,\n      yTickSuffix: settingsToMerge?.yAxis?.tickSuffix,\n      fontSize: settingsToMerge?.yAxis?.tickFontSize,\n      tickCount: settingsToMerge?.yAxis?.tickCount,\n      customTicks: settingsToMerge?.yAxis?.customTicks,\n    });\n\n    let widthOfLongestFirstXTickLabel = 0;\n    bars.forEach((currentLine) => {\n      if (!currentLine.data.length) return;\n\n      const firstDataPointsXLength = getTextWidth({ text: currentLine.data[0]!.x.toString() });\n      if (widthOfLongestFirstXTickLabel < firstDataPointsXLength) {\n        widthOfLongestFirstXTickLabel = firstDataPointsXLength;\n      }\n    });\n\n    return yAxisWidth;\n  }, [\n    bars,\n    maxYValue,\n    settingsToMerge?.yAxis?.label,\n    settingsToMerge?.yAxis?.tickSuffix,\n    settingsToMerge?.yAxis?.tickFontSize,\n    settingsToMerge?.yAxis?.tickCount,\n    settingsToMerge?.yAxis?.customTicks,\n  ]);\n\n  const chartSettings = useMemo(\n    () =>\n      getBarChartMergedChartSettings({\n        settings: settingsToMerge,\n        chartType: 'BarChart',\n        xAxisType,\n        xAxisHeight,\n        yAxisWidth,\n      }),\n    [settingsToMerge, xAxisType, xAxisHeight, yAxisWidth],\n  );\n\n  return (\n    <ResponsiveContainer width='100%' height='100%'>\n      <BarChartBase\n        data={transformedDataForRecharts}\n        className={clsx(\n          CLASSES.barChart,\n          styles.barChartDefaultStyle,\n          settingsToMerge?.xAxis?.label && styles.barChartLabelGap,\n          className,\n        )}\n        style={style}\n        {...chartSettings.barChartBase.props}\n        layout={BAR_LAYOUT_TO_CHART_LAYOUT[barsLayout]} // <--- chart layout is by default 'horizontal' (which means bars layout is vertical).\n        // reverseStackOrder // <--- default is false. When true, stacked items will be rendered right to left. By default, stacked items are rendered left to right. Render direction affects SVG layering, not x position.\n        // barCategoryGap='10%' // <--- gap between bars. Hard to make this generic. The default seems to do a pretty good job.\n      >\n        {/* MUST come before XAxis & YAxis */}\n        {chartSettings.grid.show && <CartesianGrid {...chartSettings.grid.props} />}\n\n        <XAxis\n          {...chartSettings.xAxis.props}\n          {...(barsLayout === 'vertical' ? chartSettings.xAxis.verticalProps : { type: 'number' as any })}\n          label={{\n            ...chartSettings.xAxis.label,\n            value: barsLayout === 'vertical' ? chartSettings.xAxis.label?.value : chartSettings.yAxis.label?.value,\n          }}\n          tick={(tickProps) => (\n            // passes everything as an argument! x, y, width, height, everything! You'll even need to handle the tick's positioning, and format the entire tick.\n            <CustomizedAxisTick {...tickProps} xTickFormatter={chartSettings.xAxis.tickFormatter} />\n          )}\n        />\n\n        <YAxis\n          {...chartSettings.yAxis.props}\n          label={{\n            ...chartSettings.yAxis.label,\n            value: barsLayout === 'vertical' ? chartSettings.yAxis.label.value : chartSettings.xAxis.label.value,\n          }}\n          {...(barsLayout === 'vertical' ? {} : chartSettings.yAxis.horizontalProps)}\n        />\n\n        {chartSettings.tooltip.show && (\n          <Tooltip\n            content={(tooltipProps) => (\n              <CustomTooltip\n                {...tooltipProps}\n                xValueFormatter={chartSettings.tooltip.xValueFormatter}\n                ySuffix={chartSettings.tooltip.yTickSuffix}\n              />\n            )}\n          />\n        )}\n\n        {chartSettings.legend.show && (\n          <Legend\n            {...chartSettings.legend.props}\n            onMouseEnter={(payload) => {\n              const barName = payload.dataKey as string;\n\n              if (!visibleBars[barName]) return;\n\n              setIsLegendHovered(true);\n              setIsBarTypeHovered((prevState) => ({ ...prevState, [barName]: true }));\n            }}\n            onMouseLeave={(payload) => {\n              const barName = payload.dataKey as string;\n\n              if (!visibleBars[barName]) return;\n\n              setIsLegendHovered(false);\n\n              setIsBarTypeHovered((prevState) => ({ ...prevState, [barName]: false }));\n            }}\n            onClick={(payload) => {\n              const barName = payload.dataKey as string;\n\n              if (visibleBars[barName]) setIsLegendHovered(false);\n\n              setVisibleBars((prevState) => ({ ...prevState, [barName]: !prevState[barName] }));\n            }}\n          />\n        )}\n\n        {chartSettings.zoomSlider.show && (\n          <Brush\n            {...chartSettings.zoomSlider.props}\n            startIndex={startIndex.current} // <--- The default start index of brush. If the option is not set, the start index will be 0.\n            endIndex={endIndex.current} // <---The default end index of brush. If the option is not set, the end index will be calculated by the length of data.\n            onChange={(brushProps) => {\n              startIndex.current = brushProps.startIndex as number;\n              endIndex.current = brushProps.endIndex as number;\n            }}\n            className={GLOBAL_CLASSES.brush}\n          >\n            {chartSettings.zoomSlider.showPreviewInSlider ? (\n              <BarChartBase data={transformedDataForRecharts}>\n                {bars.map(({ name }) => (\n                  <Bar key={name} dataKey={name} isAnimationActive={false} fill='#999' />\n                ))}\n              </BarChartBase>\n            ) : undefined}\n          </Brush>\n        )}\n\n        {referenceLines?.map(({ x, y, label, lineWidth, lineColor, isDashed }, index) => {\n          const referenceLineProps: any = {\n            x,\n            y,\n            label,\n            stroke: lineColor ?? '#666',\n            strokeWidth: lineWidth ?? 1,\n          };\n\n          if (isDashed) referenceLineProps.strokeDasharray = '10 10';\n\n          return (\n            <ReferenceLine\n              key={index}\n              {...chartSettings.referenceLines.props}\n              {...referenceLineProps}\n              // isFront // <--- defaults to false. true will display it on top of bars in BarCharts, or lines in LineCharts.\n            />\n          );\n        })}\n\n        {bars.map(({ name, data, unit, color, barBorderColor, stackId }, index) => {\n          const barColorInLegend = color ?? DEFAULT_BAR_COLOR;\n\n          const barProps = {\n            fill: barColorInLegend,\n            stroke: barBorderColor,\n            dataKey: name,\n            stackId,\n            unit,\n          };\n\n          return (\n            <Bar\n              key={`${name}-${index}`}\n              {...chartSettings.bars.props}\n              {...barProps}\n              hide={!visibleBars[name]}\n              onClick={(props, index) => onClickBar?.({ ...props, barTypeIndex: index, name })}\n              // onAnimationEnd={() => console.log('animation end!')}\n              // label={{ position: 'top' }} // <--- Don't need! I'm using a custom label renderer instead (CustomizedLabel).\n            >\n              {chartSettings.general.showValues && (\n                <LabelList\n                  dataKey={name}\n                  fontSize={11}\n                  position={stackId ? 'center' : 'top'}\n                  content={CustomizedLabel}\n                />\n              )}\n\n              {data.map(({ x, color: specificColor }) => {\n                const barId = `${name}-${x}`;\n\n                return (\n                  <Cell\n                    key={barId}\n                    fill={barId === activeBarId ? ACTIVE_BAR_COLOR : (specificColor ?? color ?? DEFAULT_BAR_COLOR)}\n                    opacity={isLegendHovered ? (isBarTypeHovered[name] ? 1 : 0.2) : undefined}\n                    cursor={onClickBar && 'pointer'}\n                  />\n                );\n              })}\n            </Bar>\n          );\n        })}\n      </BarChartBase>\n    </ResponsiveContainer>\n  );\n}\n","import { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    color: '#355cff',\n    data: [\n      { x: 'Page A', y: 400000000 }, // x: 0 | Page A\n      { x: 'Page B', y: 300000000 }, // x: 10 | Page B\n      { x: 'Page C', y: 800000000 }, // x: 20 | Page C\n      { x: 'Page D', y: 200000000 }, // x: 30 | Page D\n      { x: 'Page E', y: 200000000 }, // x: 40 | Page E\n      { x: 'Page F', y: 100000000 }, // x: 50 | Page F\n    ],\n  },\n];\n\nexport default function BarChartExample1() {\n  return (\n    <div className='flex h-xl w-full max-w-xl grow flex-col items-start justify-start gap-6 overflow-auto border p-6'>\n      <div className='text-xl font-bold'>• Example 1:</div>\n\n      <p>A single BarChart with 1 single color</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{\n            yAxis: { label: 'Amount in Liters' },\n            xAxis: { label: 'Countries' },\n            legend: { show: true },\n          }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    data: [\n      { x: 'Page A', y: 9900 },\n      { x: 'Page B', y: 705 },\n      { x: 'Page C', y: 314 },\n      { x: 'Page D', y: 567 },\n      { x: 'Page E', y: 202 },\n      { x: 'Page F', y: 865 },\n    ],\n  },\n];\n\nexport default function BarChartExample10() {\n  const [showXAxis, setShowXAxis] = useState(true);\n  const [showYAxis, setShowYAxis] = useState(true);\n\n  return (\n    <div className='flex h-lg w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 10:</div>\n\n      <p>Ability to show/hide Axises.</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{\n            xAxis: { show: !showXAxis },\n            yAxis: { show: !showYAxis },\n            legend: { show: true },\n          }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n\n      <div className='flex items-center justify-start gap-6'>\n        <button\n          type='button'\n          onClick={() => setShowYAxis(!showYAxis)}\n          className='rounded-md bg-blue-600 p-3 text-white hover:rounded-lg hover:bg-blue-500 active:bg-blue-800'\n        >\n          {showYAxis ? 'Hide' : 'Show'} YAxis\n        </button>\n        <button\n          type='button'\n          onClick={() => setShowXAxis(!showXAxis)}\n          className='rounded-md bg-blue-600 p-3 text-white hover:rounded-lg hover:bg-blue-500 active:bg-blue-800'\n        >\n          {showXAxis ? 'Hide' : 'Show'} XAxis\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    stackId: 'a',\n    data: [\n      { x: 'Page A', y: 0 },\n      { x: 'Page B', y: 500 },\n      { x: 'Page C', y: 1000 },\n      { x: 'Page D', y: 800 },\n      { x: 'Page E', y: 200 },\n      { x: 'Page F', y: 50 },\n    ],\n  },\n  {\n    name: 'Planes',\n    color: 'lightgreen',\n    stackId: 'a',\n    data: [\n      { x: 'Page A', y: 1000 },\n      { x: 'Page B', y: 500 },\n      { x: 'Page C', y: 0 },\n      { x: 'Page D', y: 200 },\n      { x: 'Page E', y: 100 },\n      { x: 'Page F', y: 30 },\n    ],\n  },\n];\n\nexport default function BarChartExample11() {\n  return (\n    <div className='flex h-lg w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 11:</div>\n\n      <p>Stacked BarChart.</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{\n            general: { showValues: true },\n            legend: { show: true },\n          }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Health Care',\n    data: [\n      { x: 'Israel', y: 990 },\n      { x: 'England', y: 705 },\n      { x: 'Finland', y: 314 },\n      { x: 'France', y: 567 },\n      { x: 'Netherlands', y: 202 },\n      { x: 'USA', y: 865 },\n      { x: 'Canada', y: 586 },\n      { x: 'Russia', y: 165 },\n      { x: 'China', y: 333 },\n      { x: 'Arab Saudi', y: 13 },\n      { x: 'Austria', y: 1003 },\n      { x: 'Ukraine', y: 812 },\n      { x: 'Italy', y: 435 },\n      { x: 'Germany', y: 267 },\n      { x: 'Belgium', y: 709 },\n      { x: 'Belarus', y: 920 },\n      { x: 'Bulgaria', y: 414 },\n    ],\n  },\n];\n\nexport default function BarChartExample12() {\n  return (\n    <div className='flex h-lg w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 12:</div>\n\n      <p>BarChart with zoom slider.</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{\n            xAxis: { label: 'Countries', tickAngle: 46 },\n            yAxis: { label: 'Amount in cm' },\n            legend: { show: true },\n            zoomSlider: { show: true },\n          }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Type A',\n    stackId: 'a',\n    color: 'orange',\n    data: [\n      { x: 'Israel', y: 900 },\n      { x: 'USA', y: 800 },\n      { x: 'France', y: 500 },\n      { x: 'England', y: 700 },\n      { x: 'Italy', y: 400 },\n      { x: 'Russia', y: 100 },\n      { x: 'Germany', y: 200 },\n      { x: 'China', y: 300 },\n    ],\n  },\n  {\n    name: 'Type B',\n    stackId: 'a',\n    data: [\n      { x: 'Israel', y: 990 },\n      { x: 'USA', y: 865 },\n      { x: 'France', y: 567 },\n      { x: 'England', y: 705 },\n      { x: 'Italy', y: 435 },\n      { x: 'Russia', y: 165 },\n      { x: 'Germany', y: 267 },\n      { x: 'China', y: 333 },\n    ],\n  },\n];\n\nexport default function BarChartExample13() {\n  const [activeBarId, setActiveBarId] = useState('');\n\n  return (\n    <div className='flex h-lg w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 13:</div>\n\n      <p>BarChart with onClick event.</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{\n            xAxis: { tickAngle: 45 },\n          }}\n          activeBarId={activeBarId}\n          onClickBar={({ name, payload }) => {\n            setActiveBarId(`${name}-${payload.x}`);\n          }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useMemo } from 'react';\nimport { COLORS } from '../../../../lib/components/logic/constants';\nimport { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst barsRaw: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    color: 'black',\n    data: [\n      { x: 'Page A', y: 34 }, // x: 0 | Page A\n      { x: 'Page B', y: 43 }, // x: 10 | Page B\n      { x: 'Page C', y: 18 }, // x: 20 | Page C\n      { x: 'Page D', y: 82 }, // x: 30 | Page D\n      { x: 'Page E', y: 92 }, // x: 40 | Page E\n      { x: 'Page F', y: 71 }, // x: 50 | Page F\n    ],\n  },\n];\n\nexport default function BarChartExample2() {\n  const bars = useMemo(\n    () =>\n      barsRaw.map((barType) => ({\n        ...barType,\n        data: barType.data.map((cell, innerIndex) => ({ ...cell, color: COLORS[innerIndex % 20] })),\n      })),\n    [],\n  );\n\n  return (\n    <div className='flex h-96 w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 2:</div>\n\n      <p>A single colorful BarChart</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{ legend: { show: true } }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { useMemo } from 'react';\nimport { COLORS } from '../../../../lib/components/logic/constants';\nimport { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst barsRaw: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    data: [\n      { x: 'Page A', y: 400 }, // x: 0 | Page A\n      { x: 'Page B', y: 300 }, // x: 10 | Page B\n      { x: 'Page C', y: 300 }, // x: 20 | Page C\n      { x: 'Page D', y: 200 }, // x: 30 | Page D\n      { x: 'Page E', y: 280 }, // x: 40 | Page E\n      { x: 'Page F', y: 180 }, // x: 50 | Page F\n    ],\n  },\n  {\n    name: 'Plains',\n    data: [\n      { x: 'Page A', y: 680 }, // x: 0 | Page A\n      { x: 'Page B', y: 160 }, // x: 10 | Page B\n      { x: 'Page C', y: 160 }, // x: 20 | Page C\n      { x: 'Page D', y: 140 }, // x: 30 | Page D\n      { x: 'Page E', y: 68 }, // x: 40 | Page E\n      { x: 'Page F', y: 110 }, // x: 50 | Page F\n    ],\n  },\n];\n\nexport default function BarChartExample3() {\n  const bars = useMemo(\n    () =>\n      barsRaw.map((barType, outerIndex) => ({\n        ...barType,\n        color: COLORS[outerIndex % 20],\n        data: barType.data.map((cell) => ({ ...cell, color: COLORS[outerIndex % 20] })),\n      })),\n    [],\n  );\n\n  return (\n    <div className='flex h-96 w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 3:</div>\n\n      <p>Multiple colorful BarCharts</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{ legend: { show: true } }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { COLORS } from '../../../../lib/components/logic/constants';\nimport { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    color: COLORS[1],\n    data: [\n      { x: 'Page A', y: 4 },\n      { x: 'Page B', y: 6.5 },\n      { x: 'Page C', y: 8 },\n      { x: 'Page D', y: 2, color: 'red' },\n      { x: 'Page E', y: 6 },\n      { x: 'Page F', y: 5 },\n    ],\n  },\n];\n\nexport default function BarChartExample4() {\n  return (\n    <div className='flex h-96 w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 4:</div>\n\n      <p>Single out a low valued bar</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{ legend: { show: true } }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    data: [\n      { x: 'Page A', y: 14 },\n      { x: 'Page B', y: 26.5 },\n      { x: 'Page C', y: 28 },\n      { x: 'Page D', y: 32 },\n      { x: 'Page E', y: 26 },\n      { x: 'Page F', y: 35 },\n    ],\n  },\n];\n\nexport default function BarChartExample5() {\n  return (\n    <div className='flex h-96 w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 5:</div>\n\n      <p>A BarChart wrapped in a Box</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{ legend: { show: true } }}\n          className='rounded-lg border p-2'\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Health Care',\n    data: [\n      { x: 'Israel', y: 990 },\n      { x: 'England', y: 705 },\n      { x: 'Finland', y: 314 },\n      { x: 'France', y: 567 },\n      { x: 'Netherlands', y: 202 },\n      { x: 'USA', y: 865 },\n      { x: 'Canada', y: 586 },\n      { x: 'Russia', y: 165 },\n      { x: 'China', y: 333 },\n      { x: 'Arab Saudi', y: 13 },\n      { x: 'Austria', y: 1003 },\n    ],\n  },\n];\n\nexport default function BarChartExample6() {\n  return (\n    <div className='flex h-lg w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 6:</div>\n\n      <p>XAxis with angled ticks since values are with different lengths, and some are really long.</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{\n            xAxis: { label: 'Countries', tickAngle: 46 },\n            yAxis: { label: 'Amount in km' },\n            legend: { show: true },\n          }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    data: [\n      { x: 'Page A', y: 1000000000 },\n      { x: 'Page B', y: 800200026.5 },\n      { x: 'Page C', y: 700110028 },\n      { x: 'Page D', y: 900032 },\n      { x: 'Page E', y: 117013026 },\n      { x: 'Page F', y: 688658035 },\n    ],\n  },\n];\n\nexport default function BarChartExample7() {\n  return (\n    <div className='flex h-lg w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 7:</div>\n\n      <p>Big numbers are formatted with K, M & B suffixes</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{ legend: { show: true } }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    data: [\n      { x: 'Page A', y: 100 },\n      { x: 'Page B', y: 705 },\n      { x: 'Page C', y: 314 },\n      { x: 'Page D', y: 567 },\n      { x: 'Page E', y: 202 },\n      { x: 'Page F', y: 865 },\n    ],\n  },\n];\n\nexport default function BarChartExample8() {\n  return (\n    <div className='flex h-lg w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 8:</div>\n\n      <p>A suffix for YAxis. Notice that it only affects the y axis.</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{\n            yAxis: { tickSuffix: 'cm' },\n            legend: { show: true },\n          }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import { BarSeries } from '../../../../lib/components/types';\nimport { BarChart } from '../../../../lib/main';\n\nconst bars: Array<BarSeries> = [\n  {\n    name: 'Cars',\n    unit: 'cm',\n    data: [\n      { x: 'Page A', y: 9900 },\n      { x: 'Page B', y: 705 },\n      { x: 'Page C', y: 314 },\n      { x: 'Page D', y: 567 },\n      { x: 'Page E', y: 202 },\n      { x: 'Page F', y: 865 },\n    ],\n  },\n];\n\nexport default function BarChartExample9() {\n  return (\n    <div className='flex h-lg w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 9:</div>\n\n      <p>Tooltip values show unit suffix.</p>\n\n      <div className='size-full max-h-md max-w-lg'>\n        <BarChart\n          bars={bars}\n          settings={{ legend: { show: true } }}\n          style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif', border: '1px solid black' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import BarChartExample1 from './examples/BarChartExample1';\nimport BarChartExample10 from './examples/BarChartExample10';\nimport BarChartExample11 from './examples/BarChartExample11';\nimport BarChartExample12 from './examples/BarChartExample12';\nimport BarChartExample13 from './examples/BarChartExample13';\nimport BarChartExample2 from './examples/BarChartExample2';\nimport BarChartExample3 from './examples/BarChartExample3';\nimport BarChartExample4 from './examples/BarChartExample4';\nimport BarChartExample5 from './examples/BarChartExample5';\nimport BarChartExample6 from './examples/BarChartExample6';\nimport BarChartExample7 from './examples/BarChartExample7';\nimport BarChartExample8 from './examples/BarChartExample8';\nimport BarChartExample9 from './examples/BarChartExample9';\n\nexport default function BarChartExamplePage() {\n  return (\n    <div className='flex size-full flex-col items-start justify-start gap-10 overflow-auto p-6'>\n      <h1 className='self-center text-3xl font-bold'>BarChart Examples</h1>\n\n      <div className='size-full space-y-10'>\n        <BarChartExample1 />\n        <BarChartExample2 />\n        <BarChartExample3 />\n        <BarChartExample4 />\n        <BarChartExample5 />\n        <BarChartExample6 />\n        <BarChartExample7 />\n        <BarChartExample8 />\n        <BarChartExample9 />\n        <BarChartExample10 />\n        <BarChartExample11 />\n        <BarChartExample12 />\n        <BarChartExample13 />\n      </div>\n    </div>\n  );\n}\n"],"names":["BarChart","generateCategoricalChart","Bar","XAxis","YAxis","formatAxisMap","CustomizedLabel","props","x","y","width","height","value","fontSize","fontWeight","position","updatedYPosition","xPosition","jsx","clsx","styles","DEFAULT_BAR_COLOR","ACTIVE_BAR_COLOR","BAR_LAYOUT_TO_CHART_LAYOUT","CLASSES","xAxisType","barsLayout","settingsToMerge","bars","referenceLines","className","style","onClickBar","activeBarId","useMemo","runValidationsOnAllSeries","lengthOfLongestData","getLengthOfLongestData","startIndex","useRef","endIndex","BRUSH_ITEMS_PER_PAGE","isLegendHovered","setIsLegendHovered","useState","isBarTypeHovered","setIsBarTypeHovered","getNamesObject","visibleBars","setVisibleBars","positiveXTickRotateAngle","transformedDataForRecharts","transformedDataByKey","barType","maxYValue","currentBarType","widthOfLongestXTickLabel","getWidthOfLongestXLabel","FORMATTERS","xAxisHeight","getXAxisHeight","yAxisWidth","calculateYAxisWidth","currentLine","getTextWidth","chartSettings","getBarChartMergedChartSettings","ResponsiveContainer","jsxs","BarChartBase","CartesianGrid","tickProps","CustomizedAxisTick","Tooltip","tooltipProps","CustomTooltip","Legend","payload","barName","prevState","Brush","brushProps","GLOBAL_CLASSES","name","label","lineWidth","lineColor","isDashed","index","referenceLineProps","ReferenceLine","data","unit","color","barBorderColor","stackId","barProps","LabelList","specificColor","barId","Cell","BarChartExample1","BarChartExample10","showXAxis","setShowXAxis","showYAxis","setShowYAxis","BarChartExample11","BarChartExample12","BarChartExample13","setActiveBarId","barsRaw","BarChartExample2","cell","innerIndex","COLORS","BarChartExample3","outerIndex","BarChartExample4","BarChartExample5","BarChartExample6","BarChartExample7","BarChartExample8","BarChartExample9","BarChartExamplePage"],"mappings":"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","x_google_ignoreList":[0]}