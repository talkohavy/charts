{"version":3,"file":"index.DfJ8_YXp.js","sources":["../../../lib/components/PieChart/logic/ActiveShape/ActiveShape.tsx","../../../lib/components/PieChart/logic/constants.ts","../../../lib/components/PieChart/logic/Legend/Legend.tsx","../../../lib/components/PieChart/logic/PercentLabelInSlice/PercentLabelInSlice.tsx","../../../lib/components/PieChart/logic/PieSlice/PieSlice.tsx","../../../lib/components/PieChart/logic/PieTooltip/PieTooltip.tsx","../../../lib/components/PieChart/logic/utils/getDirectionFromAngle.ts","../../../lib/components/PieChart/logic/utils/getPointOnArc.ts","../../../lib/components/PieChart/logic/utils/drawArc.ts","../../../lib/components/PieChart/logic/utils/getFontSizeFrom.ts","../../../lib/components/PieChart/logic/utils/getMergedPieChartSettings.ts","../../../lib/components/PieChart/logic/utils/getSliceData.ts","../../../lib/components/PieChart/logic/utils/getPieChart.ts","../../../lib/components/PieChart/PieChart.tsx","../../../src/pages/PieChartExamplesPage/examples/PieChartExample1.tsx","../../../src/pages/PieChartExamplesPage/examples/PieChartExample2.tsx","../../../src/pages/PieChartExamplesPage/examples/PieChartExample3.tsx","../../../src/pages/PieChartExamplesPage/PieChartExamplesPage.tsx"],"sourcesContent":["type ActiveShapeProps = {\n  color: string;\n  activeOuterArcPath: string;\n};\n\nexport default function ActiveShape(props: ActiveShapeProps) {\n  const { color, activeOuterArcPath } = props;\n\n  // Part 1: The outer arc\n  return <path d={activeOuterArcPath} stroke='none' fill={color} />;\n}\n","const CLASSES = {\n  pieChart: 'tk-custom-pie-chart',\n};\n\nconst PIE_CHART = {\n  radius: {\n    small: 250,\n    large: 385,\n  },\n  centerPoint: {\n    x: 500,\n    y: 400,\n  },\n  height: 800,\n  width: 1000,\n};\n\nexport { CLASSES, PIE_CHART };\n","import { PieChartDrawData } from '../../types';\nimport styles from './Legend.module.scss';\n\ntype LegendProps = {\n  pieChartData: Array<PieChartDrawData>;\n  setActiveSlice: (value: PieChartDrawData) => void;\n  xValueFormatter: (value: string) => string;\n};\n\nexport default function Legend(props: LegendProps) {\n  const { pieChartData, setActiveSlice, xValueFormatter } = props;\n\n  return (\n    <div className={styles.legend}>\n      <div className={styles.legendScrollbar}>\n        <div className={styles.legendContent}>\n          {pieChartData.map((pieSlice, index) => {\n            const { name, color } = pieSlice;\n\n            return (\n              <div\n                key={index}\n                className={styles.legendContentItem}\n                onMouseEnter={() => setActiveSlice(pieSlice)}\n                onMouseLeave={() => setActiveSlice({} as PieChartDrawData)}\n              >\n                <div className={styles.legendContentItemIcon} style={{ backgroundColor: color }} />\n\n                <div className={styles.legendContentItemLabel} title={name} style={{ color }}>\n                  {xValueFormatter(name)}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { PIE_CHART } from '../constants';\n\ntype PercentLabelInSliceProps = {\n  radius: number;\n  percentFormatted: number;\n  middleDirection: { xDirection: number; yDirection: number };\n  labelDistanceFromCenter: number;\n  fontSize: number;\n};\n\nexport default function PercentLabelInSlice(props: PercentLabelInSliceProps) {\n  const { radius, percentFormatted, middleDirection, labelDistanceFromCenter, fontSize } = props;\n\n  return (\n    <text\n      x={PIE_CHART.centerPoint.x + labelDistanceFromCenter * radius * middleDirection.xDirection}\n      y={PIE_CHART.centerPoint.y + labelDistanceFromCenter * radius * middleDirection.yDirection}\n      textAnchor='middle'\n      style={{ fontSize, fill: 'white', userSelect: 'none', alignmentBaseline: 'central' }}\n    >\n      {percentFormatted}%\n    </text>\n  );\n}\n","import clsx from 'clsx';\nimport styles from './PieSlice.module.scss';\n\ntype PieSliceProps = {\n  path: string;\n  color: string;\n  isActive: boolean;\n};\n\nexport default function PieSlice(props: PieSliceProps) {\n  const { path, color, isActive } = props;\n\n  return (\n    <path\n      fill={color}\n      d={path}\n      strokeWidth='4'\n      stroke='white'\n      className={clsx(styles.pieSlice, isActive && 'pie-chart-active-slice')}\n    />\n  );\n}\n","import clsx from 'clsx';\nimport { PIE_CHART } from '../constants';\nimport styles from './PieTooltip.module.scss';\n\nconst tooltipWidth = 300;\nconst tooltipHeight = 150;\n\ntype TooltipProps = {\n  name: string;\n  value: number | string;\n  color: string;\n  radius: number;\n  percentFormatted: number;\n  middleDirection: {\n    xDirection: number;\n    yDirection: number;\n  };\n  yValueSuffix: string;\n  xValueFormatter: (value: string) => string;\n  yValueFormatter: (value: number) => string;\n};\n\nexport default function PieTooltip(props: TooltipProps) {\n  const {\n    name,\n    value,\n    color,\n    percentFormatted,\n    radius,\n    middleDirection,\n    xValueFormatter,\n    yValueFormatter,\n    yValueSuffix,\n  } = props;\n\n  const formattedName = xValueFormatter(name);\n  const formattedValue = yValueFormatter(value as number);\n  const xPosition = PIE_CHART.centerPoint.x + radius * 0.5 * middleDirection.xDirection;\n  const yPosition = PIE_CHART.centerPoint.y + radius * 0.5 * middleDirection.yDirection;\n\n  return (\n    <>\n      <rect\n        x={xPosition}\n        y={yPosition}\n        width={tooltipWidth}\n        height={tooltipHeight}\n        fill='white'\n        stroke='black'\n        strokeWidth={2}\n        rx={10}\n        className={clsx('pie-chart-tooltip', styles.pieChartTooltip)}\n        style={{ pointerEvents: 'none' }}\n      />\n\n      <text\n        x={xPosition + 20}\n        y={yPosition + 40}\n        fill={color}\n        fontSize={32}\n        fontWeight='bold'\n        style={{ pointerEvents: 'none' }}\n      >\n        Name: {formattedName}\n      </text>\n\n      <text\n        x={xPosition + 20}\n        y={yPosition + 95}\n        fill='black'\n        fontSize={24}\n        fontWeight='thin'\n        style={{ pointerEvents: 'none' }}\n        className='pie-chart-tooltip-value'\n      >\n        Value: {formattedValue}\n        {yValueSuffix ?? ''}\n      </text>\n\n      <text\n        x={xPosition + 20}\n        y={yPosition + 130}\n        fill='black'\n        fontSize={24}\n        fontWeight='thin'\n        style={{ pointerEvents: 'none' }}\n        className='pie-chart-tooltip-percent'\n      >\n        Percent: {percentFormatted}%\n      </text>\n    </>\n  );\n}\n","/**\n * @example\n * // Use them like so:\n * const x = PIE_CHART.centerPoint.x + xDirection * radius;\n * const y = PIE_CHART.centerPoint.y + yDirection * radius;\n */\nfunction getDirectionFromAngle(angleInRadians: number) {\n  return {\n    xDirection: Math.cos(angleInRadians),\n    yDirection: Math.sin(angleInRadians),\n  };\n}\n\nexport { getDirectionFromAngle };\n","import { PIE_CHART } from '../constants';\nimport { getDirectionFromAngle } from './getDirectionFromAngle';\n\ntype GetPointOnArcProps = {\n  radius: number;\n  angleInRadians: number;\n};\n\n/**\n * @description\n * Function to calculate endpoint of arc given center, radius, and angle in degrees.\n */\nfunction getPointOnArc(props: GetPointOnArcProps) {\n  const { radius, angleInRadians } = props;\n\n  const dir = getDirectionFromAngle(angleInRadians);\n\n  const x = PIE_CHART.centerPoint.x + dir.xDirection * radius;\n  const y = PIE_CHART.centerPoint.y + dir.yDirection * radius;\n\n  return { x, y };\n}\n\nexport { getPointOnArc };\n","import { getPointOnArc } from './getPointOnArc';\n\ntype DrawArcProps = {\n  innerRadius: number;\n  outerRadius: number;\n  startAngle: number;\n  endAngle: number;\n};\n\nfunction drawArc(props: DrawArcProps) {\n  const { innerRadius, outerRadius, startAngle, endAngle } = props;\n\n  // Step 1: get the 4 points on the main arc and the secondary arc\n  const innerArcStartPoint = getPointOnArc({ radius: innerRadius, angleInRadians: Math.PI + startAngle });\n  const innerArcEndPoint = getPointOnArc({ radius: innerRadius, angleInRadians: Math.PI + endAngle });\n  const outerArcStartPoint = getPointOnArc({ radius: outerRadius, angleInRadians: Math.PI + startAngle });\n  const outerArcEndPoint = getPointOnArc({ radius: outerRadius, angleInRadians: Math.PI + endAngle });\n\n  // Step 2: get 0 of small arc, or 1 if it's a large arc\n  const largeArcFlag = endAngle - startAngle <= Math.PI ? 0 : 1;\n\n  // Step 3: Construct the d value for the SVG's path\n  // const path = `M ${PIE_CHART.centerPoint.x},${PIE_CHART.centerPoint.y}\n  //               L ${arcStartPoint.x},${arcStartPoint.y}\n  //               A ${radius},${radius} 0 ${largeArcFlag} 1 ${arcEndPoint.x},${arcEndPoint.y}\n  //               Z`;\n  const path = `\n  M ${outerArcStartPoint.x} ${outerArcStartPoint.y}\n  A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerArcEndPoint.x} ${outerArcEndPoint.y}\n  L ${innerArcEndPoint.x} ${innerArcEndPoint.y}\n  A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerArcStartPoint.x} ${innerArcStartPoint.y}\n  Z`;\n\n  return path;\n}\n\nexport { drawArc };\n","type GetFontSizeFromProps = {\n  percent: number;\n  showActiveShape?: boolean;\n};\n\n/**\n * @description\n * 100% is actually 1.\n */\nfunction getFontSizeFrom(props: GetFontSizeFromProps) {\n  const { percent } = props;\n\n  // No matter if big pieChart or small pieChart, Pie slices below 2% are 24px:\n  if (percent <= 0.03) return 24;\n\n  // PieChart is large version:\n  return 40;\n}\n\nexport { getFontSizeFrom };\n","import { FORMATTERS, formatLabel } from '../../../logic/utils';\nimport { PieChartSettings } from '../../types';\n\nconst defaultYValueFormatter = (num: number) => {\n  if (num >= 1000000) {\n    return new Intl.NumberFormat('en-US', {\n      notation: 'compact',\n      compactDisplay: 'short',\n      maximumFractionDigits: 2,\n    }).format(num);\n  } else {\n    return new Intl.NumberFormat('en-US').format(num);\n  }\n};\n\ntype getMergedPieChartSettingsProps = {\n  settings?: PieChartSettings;\n};\n\nfunction getMergedPieChartSettings(props: getMergedPieChartSettingsProps) {\n  const { settings } = props;\n\n  const showLegend = settings?.legend?.show ?? true;\n\n  return {\n    legend: {\n      show: showLegend,\n      props: {\n        xValueFormatter:\n          settings?.legend?.xValueFormatter ?? (((value) => formatLabel(value, 10)) as (value: string) => string),\n        // iconSize: 14,\n        // fontSize: 14\n      },\n    },\n    tooltip: {\n      props: {\n        yValueSuffix: settings?.tooltip?.unit ?? '', // <--- Notice that I copy whatever the yAxis has.\n        xValueFormatter: settings?.tooltip?.xValueFormatter ?? (FORMATTERS.category as (value: string) => string),\n        yValueFormatter: settings?.tooltip?.yValueFormatter ?? defaultYValueFormatter,\n      },\n    },\n  };\n}\n\nexport { getMergedPieChartSettings };\n","import { PIE_CHART } from '../constants';\nimport { drawArc } from './drawArc';\nimport { getDirectionFromAngle } from './getDirectionFromAngle';\nimport { getPointOnArc } from './getPointOnArc';\n\ntype GetSliceDataProps = {\n  startAngle: number;\n  endAngle: number;\n  radius: number;\n};\n\nfunction getSliceData(props: GetSliceDataProps) {\n  const { startAngle, endAngle, radius } = props;\n\n  // Step 1: get the 2 points on the main arc\n  const arcStartPoint = getPointOnArc({ radius, angleInRadians: Math.PI + startAngle });\n  const arcEndPoint = getPointOnArc({ radius, angleInRadians: Math.PI + endAngle });\n\n  // Step 2: get direction of middle slice\n  const middleDirection = getDirectionFromAngle(Math.PI + (startAngle + endAngle) / 2);\n\n  // Step 3: get 0 of small arc, or 1 if it's a large arc\n  const largeArcFlag = endAngle - startAngle <= Math.PI ? 0 : 1;\n\n  // Step 4: Construct the d value for the SVG's path\n  const path = `M ${PIE_CHART.centerPoint.x},${PIE_CHART.centerPoint.y} \n                  L ${arcStartPoint.x},${arcStartPoint.y} \n                  A ${radius},${radius} 0 ${largeArcFlag} 1 ${arcEndPoint.x},${arcEndPoint.y} \n                  Z`;\n\n  const emptyGapDiff = 0.005;\n\n  const activeOuterArcPath = drawArc({\n    startAngle: startAngle + emptyGapDiff,\n    endAngle: endAngle - emptyGapDiff,\n    innerRadius: radius + 6,\n    outerRadius: radius + 12,\n  });\n\n  return { path, activeOuterArcPath, middleDirection, arcStartPoint, arcEndPoint };\n}\n\nexport { getSliceData };\n","import { COLORS } from '../../../logic/constants';\nimport { PieChartDrawData, PieSlice } from '../../types';\nimport { getSliceData } from './getSliceData';\n\ntype GetPieChartProps = {\n  data: Array<PieSlice>;\n  radius: number;\n};\n\nfunction getPieChart(props: GetPieChartProps): Array<PieChartDrawData> {\n  const { data, radius } = props;\n\n  const sum = data.reduce((acc, curItem) => acc + curItem.value, 0);\n\n  const pieChartDrawData: Array<any> = data.map((curItem, index) => {\n    const percent = curItem.value / sum;\n\n    return {\n      ...curItem,\n      color: curItem.color ?? COLORS[index % COLORS.length],\n      percent,\n      percentFormatted: Math.floor(percent * 100),\n      angle: percent * 2 * Math.PI,\n    };\n  });\n\n  // Calc start & end angles for every slice\n  pieChartDrawData[0].startAngle = 0;\n  pieChartDrawData[0].endAngle = pieChartDrawData[0].angle;\n  for (let i = 1; i < pieChartDrawData.length; i++) {\n    pieChartDrawData[i].startAngle = pieChartDrawData[i - 1].endAngle;\n    pieChartDrawData[i].endAngle = pieChartDrawData[i - 1].endAngle + pieChartDrawData[i].angle;\n  }\n\n  const piChartData = pieChartDrawData.map((item) => {\n    const { startAngle, endAngle } = item;\n\n    const sliceData = getSliceData({ startAngle, endAngle, radius });\n\n    return { ...item, ...sliceData };\n  });\n\n  return piChartData;\n}\n\nexport { getPieChart };\n","import { useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport ActiveShape from './logic/ActiveShape';\nimport { CLASSES, PIE_CHART } from './logic/constants';\nimport PieChartLegend from './logic/Legend';\nimport PercentLabelInSlice from './logic/PercentLabelInSlice/PercentLabelInSlice';\nimport PieSliceComponent from './logic/PieSlice';\nimport PieTooltip from './logic/PieTooltip';\nimport { getFontSizeFrom, getMergedPieChartSettings, getPieChart } from './logic/utils';\nimport styles from './PieChart.module.scss';\nimport { PieChartDrawData, PieChartSettings, PieSlice } from './types';\n\ntype PieChart = {\n  data: Array<PieSlice>;\n  settings?: PieChartSettings;\n  className?: string;\n};\n\nexport default function PieChart(props: PieChart) {\n  const { data, settings: settingsToMerge, className } = props;\n\n  const [activeSlice, setActiveSlice] = useState({} as PieChartDrawData);\n\n  const { data: pieChartData, radius } = useMemo(() => {\n    const radius = PIE_CHART.radius.large;\n\n    const sortedData = data.toSorted((a: any, b: any) => (a.value > b.value ? -1 : 1));\n\n    const sortedPiChartData = getPieChart({ data: sortedData, radius });\n\n    return { data: sortedPiChartData, radius };\n  }, [data]);\n\n  const chartSettings = useMemo(() => getMergedPieChartSettings({ settings: settingsToMerge }), [settingsToMerge]);\n\n  return (\n    <div className={clsx(CLASSES.pieChart, styles.pieChart, className)}>\n      {chartSettings.legend.show && (\n        <PieChartLegend pieChartData={pieChartData} setActiveSlice={setActiveSlice} {...chartSettings.legend.props} />\n      )}\n\n      <svg\n        viewBox={`0 0 ${PIE_CHART.width} ${PIE_CHART.height}`}\n        xmlns='http://www.w3.org/2000/svg'\n        style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif' }}\n      >\n        {pieChartData.map((pieSlice, index) => {\n          const { name, percent, percentFormatted, color, middleDirection, activeOuterArcPath, path } = pieSlice;\n\n          const labelDistanceFromCenter = 0.9 - 0.65 * percent; // <--- range of values goes between 25% - 90% of R from the center.\n          const fontSize = getFontSizeFrom({ percent });\n\n          return (\n            <g\n              key={index}\n              onMouseEnter={() => setActiveSlice(pieSlice)}\n              onMouseLeave={() => setActiveSlice({} as PieChartDrawData)}\n            >\n              <PieSliceComponent path={path} color={color} isActive={name === activeSlice.name} />\n\n              {percent > 0.01 && (\n                <PercentLabelInSlice\n                  radius={radius}\n                  percentFormatted={percentFormatted}\n                  middleDirection={middleDirection}\n                  labelDistanceFromCenter={labelDistanceFromCenter}\n                  fontSize={fontSize}\n                />\n              )}\n\n              {activeSlice.name === name && <ActiveShape color={color} activeOuterArcPath={activeOuterArcPath} />}\n            </g>\n          );\n        })}\n\n        {activeSlice.name && (\n          <PieTooltip\n            name={activeSlice.name}\n            radius={radius}\n            value={activeSlice.value}\n            color={activeSlice.color}\n            percentFormatted={activeSlice.percentFormatted}\n            middleDirection={activeSlice.middleDirection}\n            {...chartSettings.tooltip.props}\n          />\n        )}\n      </svg>\n    </div>\n  );\n}\n","import { PieChart } from '../../../../lib/main';\n\nconst data = [\n  { name: 'Group A', value: 400 },\n  { name: 'Group B', value: 300 },\n  { name: 'Group C', value: 300 },\n  { name: 'Group D', value: 200 },\n];\n\nexport default function PieChartExample1() {\n  return (\n    <div className='flex w-full max-w-xl grow flex-col items-start justify-start gap-6 overflow-auto border p-6'>\n      <div className='text-xl font-bold'>• Example 1:</div>\n\n      <p>Basic PieChart:</p>\n\n      <PieChart data={data} />\n    </div>\n  );\n}\n","import { PieSlice } from '../../../../lib/components/PieChart/types';\nimport { PieChart } from '../../../../lib/main';\n\nconst data: Array<PieSlice> = [\n  { name: 'Group A', value: 20 },\n  { name: 'Group B', value: 0.8 },\n  { name: 'Group C', value: 4 },\n  { name: 'Group D', value: 1 },\n  { name: 'Group E', value: 1 },\n  { name: 'Group F', value: 0.3 },\n  { name: 'Group G', value: 0.1 },\n];\n\nexport default function PieChartExample2() {\n  return (\n    <div className='flex w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 2:</div>\n\n      <p>How it looks when slices are small:</p>\n\n      <div className='size-full max-h-lg max-w-lg'>\n        <PieChart data={data} />\n      </div>\n    </div>\n  );\n}\n","import { PieSlice } from '../../../../lib/components/PieChart/types';\nimport { PieChart } from '../../../../lib/main';\n\nconst data: Array<PieSlice> = [\n  { name: 'Group A', value: 99 },\n  { name: 'Group B', value: 28 },\n  { name: 'Group C', value: 4 },\n  { name: 'Group D', value: 21 },\n  { name: 'Group E', value: 31 },\n  { name: 'Group F', value: 51 },\n  { name: 'Group G', value: 21 },\n  { name: 'Group H', value: 31 },\n  { name: 'Group I', value: 71 },\n  { name: 'Group J', value: 41 },\n  { name: 'Group K', value: 51 },\n  { name: 'Group L', value: 11 },\n];\n\nexport default function PieChartExample3() {\n  return (\n    <div className='flex h-xl w-full max-w-xl grow flex-col items-start justify-start gap-6 border p-6'>\n      <div className='text-xl font-bold'>• Example 3:</div>\n\n      <p>How it looks when there are many slices: (scrollable legend)</p>\n\n      <div className='size-full max-h-lg max-w-lg'>\n        <PieChart\n          data={data}\n          // showLegend\n          // style={{ fontFamily: 'Hiragino Sans GB,Arial,sans-serif' }}\n        />\n      </div>\n    </div>\n  );\n}\n","import PieChartExample1 from './examples/PieChartExample1';\nimport PieChartExample2 from './examples/PieChartExample2';\nimport PieChartExample3 from './examples/PieChartExample3';\n\nexport default function PieChartExamplesPage() {\n  return (\n    <div className='flex size-full flex-col items-start justify-start gap-10 overflow-auto p-6'>\n      <h1 className='self-center text-3xl font-bold'>PieChart Examples</h1>\n\n      <div className='size-full space-y-10'>\n        <PieChartExample1 />\n        <PieChartExample2 />\n        <PieChartExample3 />\n      </div>\n    </div>\n  );\n}\n"],"names":["ActiveShape","props","color","activeOuterArcPath","CLASSES","PIE_CHART","Legend","pieChartData","setActiveSlice","xValueFormatter","styles","jsx","pieSlice","index","name","jsxs","PercentLabelInSlice","radius","percentFormatted","middleDirection","labelDistanceFromCenter","fontSize","PieSlice","path","isActive","clsx","tooltipWidth","tooltipHeight","PieTooltip","value","yValueFormatter","yValueSuffix","formattedName","formattedValue","xPosition","yPosition","Fragment","getDirectionFromAngle","angleInRadians","getPointOnArc","dir","x","y","drawArc","innerRadius","outerRadius","startAngle","endAngle","innerArcStartPoint","innerArcEndPoint","outerArcStartPoint","outerArcEndPoint","largeArcFlag","getFontSizeFrom","percent","defaultYValueFormatter","num","getMergedPieChartSettings","settings","formatLabel","FORMATTERS","getSliceData","arcStartPoint","arcEndPoint","emptyGapDiff","getPieChart","data","sum","acc","curItem","pieChartDrawData","COLORS","i","item","sliceData","PieChart","settingsToMerge","className","activeSlice","useState","useMemo","sortedData","a","b","chartSettings","PieChartLegend","PieSliceComponent","PieChartExample1","PieChartExample2","PieChartExample3","PieChartExamplesPage"],"mappings":"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"}